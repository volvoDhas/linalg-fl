//tests for ../lib/matrixlist.fl

load (DIR^"../lib/matrixlist.fl");
load (DIR^"flunit.fl");

//NOTE on unit testing strategy
//The main purpose of this library (ref README) is
//to perform linear numerics on floats, ints, bit vectors
//and ranges of these types.
//However, because of a current weakness in 
//the fl framework's type-checking system,
//type inference between the 3 concerned types does
//not always succeed. (Refer to various NOTEs in ../lib/*.fl
//So the primary formula for testing is to ensure
//that types are indeed correctly inferred.
//The next object of importance is of course
//the correctness of the numerical computation.
//The choice of using a heuristic oracle (refer NOTE in ./flunit.fl)
//suffices for the limited ambition of this library
//as a research aid



//NOTE on the general pattern on test cases
//Reflecting the primary strategy on checking
//type inference, each function is tested with
//int, float & bv operands in range and scalar 
//combinations.
//In rare cases, symbolic inputs are tested
//Soundness of numerical computation is an
//important, but secondary concern.
//So test inputs toward this end are only
//at a level to check sanity


//some handy definitions
let lei	    = {[]::int list};
let mei	    = replicate 4 lei;
let li1	    = [1,1];
let lf1	    = map int2float li1;
let lbv1    = map int2bv li1;
let lbev1   = map int2bev li1;
let lip	    = [1,2];
let lfp	    = map int2float lip;
let lbvp    = map int2bv lip;
let lzi	    = {zeros 2 :: int list};
let lzf	    = {zeros 2 :: float list};
let lzbv    = {zeros 2 :: bv list};
let lzbev   = [int2bev 0,int2bev 0]; //{zeros 2 :: bev list};
let mzi	    = {zeros 4 2 :: (int list) list};
let lip	    = [1,2];
let mip	    = replicate 4 lip;
let mzf	    = {zeros 4 2 :: (float list) list};
let lfp	    = [1.0,2.0];
let mfp	    = replicate 4 lfp;
let mzbv    = {zeros 4 2 :: (bv list) list};
let mzbev   = replicate 4 lzbev;
let lbvp    = [int2bv 1, int2bv 2];
let mbvp    = replicate 4 lbvp;
let lbevp   = map int2bev lip;
let mbevp   = replicate 4 lbevp;
let mi1	    = replicate 4 li1;
let mf1	    = mmap int2float mi1;
let mbv1    = mmap int2bv mi1;
let mbev1   = mmap int2bev mi1;
let scale   = '256;
let miid    = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];
let mfid    = mmap int2float miid;
let mbvid   = mmap int2bv miid;
let mbevid  = mmap int2bev miid;
let lir2    = [mk_range (-2) (-1), mk_range 1 2];
let lir1    = [mk_range (-1) 0, mk_range 0 1];
let lfr2    = map intr2floatr lir2;
let lfr1    = map intr2floatr lir1;
let lbvr2   = map intr2bvr  lir2;
let lbvr1   = map intr2bvr  lir1;
let lbevr2   = map intr2bevr  lir2;
let lbevr1   = map intr2bevr  lir1;
let mir2    = replicate 4 lir2;
let mfr2    = replicate 4 lfr2;
let mbvr2   = replicate 4 lbvr2;
let mbevr2   = replicate 4 lbevr2;
let irlt1   = mk_range (-1) 1;
let frlt1   = intr2floatr irlt1;
let bvrlt1  = intr2bvr irlt1;
let bevrlt1  = intr2bevr irlt1;

//testcases for mk_range
let test_mk_range =
(printf "test_mk_range\n") seq
    val (RANGE xi yi) =  (mk_range 1 4) in
    val (RANGE xf yf) =  (mk_range 1.0 4.0) in
    val (RANGE xb yb) =  (mk_range (int2bv 1) (int2bv 4)) in
    val (RANGE xbe ybe) =  (mk_range (int2bev 1) (int2bev 4)) in
    let ls = variable "l" => (int2bv 1) | (int2bv 2) in
    let hs = variable "h" => (int2bv 2) | (int2bv 3) in
    let ls' = variable "l" => (int2bv 4) | (int2bv 5) in
    val (RANGE xs ys) = mk_range ls hs in
    (check_eq (xi,yi) (1,4)):
    (check_eq (xf,yf) (1.0,4.0)):
    (check_eq (xb,yb) (int2bv 1,int2bv 4)):
    (check_eq (xbe,ybe) (int2bev 1,int2bev 4)):
    (check_eq (xs,ys) (ls,hs)):
    (check_fail (mk_range ls' hs) (RANGE (int2bv 0) (int2bv 0))):
    []
;

check_res test_mk_range;

//testcases for intr2floatr
let test_intr2floatr =
(printf "test_intr2floatr\n") seq
    val (RANGE xf yf) = intr2floatr (mk_range 1 2) in
    (check_eq (xf,yf) (1.0,2.0)):
    []
;

check_res test_intr2floatr;

//testcases for intr2bvr
let test_intr2bvr =
(printf "test_intr2bvr\n") seq
    val (RANGE xf yf) = intr2bvr (mk_range 1 2) in
    (check_eq (xf,yf) (int2bv 1,int2bv 2)):
    []
;

check_res test_intr2bvr;

//testcases for intr2bevr
let test_intr2bevr =
(printf "test_intr2bevr\n") seq
    val (RANGE xf yf) = intr2bevr (mk_range 1 2) in
    (check_eq (xf,yf) (int2bev 1,int2bev 2)):
    []
;

check_res test_intr2bevr;

//testcases for zipwithsc
let test_zipwithsc = 
(printf "test_zipwithsc\n") seq
    (check_eq (zipwithsc li1 1 (defix +)) (zipwithsc li1 2 (defix *))):
    []
;

check_res test_zipwithsc;

//testcases for zipwith
let test_zipwith = 
(printf "test_zipwith\n") seq
    (check_eq (zipwith li1 li1 (defix +)) (zipwith li1 [2,2] (defix *))):
    []
;

check_res test_zipwith;

//testcases for islempty
let test_islempty = 
(printf "test_islempty\n") seq
    let l = replicate 4 1 in
    (check_false (islempty l)):
    (check_true (islempty lei)):
    (check_true (islempty{ []::{int} range list})):
    []
;

check_res test_islempty;

//testcases for islempty
let test_ismempty = 
(printf "test_ismempty\n") seq
    let l = replicate 4 1 in
    let m = replicate 4 l in
    (check_false (ismempty m)):
    (check_true (ismempty mei)):
    (check_true (ismempty {[[],[]]::({int} range list) list})):
    []
;

check_res test_ismempty;


//testcases for zeros
let test_zeros =
(printf "test_zeros\n") seq
    let e1 = {zeros 0 :: int list} in
    let e2 = {zeros (-10) :: int list} in
    let z1 = {zeros 10 :: int list} in
    let me1 = {zeros 0 0 :: (int list) list} in
    let me2 = {zeros 10 (-10) :: (int list) list} in
    let mz1 = {zeros 10 10 :: (int list) list} in
    (check_lempty e1):
    (check_fail e2 []):
    (check_len z1 10):
    (check_mempty me1):
    (check_len mz1 10):
    (check_len (el 1 mz1) 10):
    (check_fail me2 []):
    []
;

check_res test_zeros;

//testcases for mmap
let test_mmap =
(printf "test_mmap\n") seq
    let m = zeros 2 2 in
    let mm = mmap (\e. e+1) m in
    let fmm = filter (\e. e!=1) (flat mm) in 
    (check_len fmm 0):
    []
;

check_res test_mmap;

//testcases for mmap2
let test_mmap2 = 
(printf "test_mmap2\n") seq
    let mm2 = mmap2 opsub mi1 mi1 in
    let fmm2 = filter (\e. e!=0) (flat mm2) in
    (check_len fmm2 0):
    []
;
check_res test_mmap2;

//testcases for sum
let test_sum = 
(printf "test_sum\n") seq
    let li = [1,-1,2,-2,3,-3] in
    let lf = [1.0,-1.0,2.0,-2.0] in
    let lbv =  map int2bv li in
    let lbev =  map int2bev li in
    let mi = replicate 4 li in
    let mf = replicate 4 lf in
    let mbv = replicate 4 lbv in
    let mbev = replicate 4 lbev in
    let lzi = {zeros 4 :: int list} in
    let lzf = {zeros 4 :: float list} in
    let lzbv = map int2bv lzi in
    let lzbev = map int2bev lzi in
    (check_eq (sum lei) 0):
    (check_eq (sum li) 0):
    (check_eq (sum lf) 0.0):
    (check_eq (sum lbv) (int2bv 0)):
    (check_eq (sum lbev) (int2bev 0)):
    (check_eq (sum lir2) irlt1):
    (check_eq (sum lfr2) frlt1):
    (check_eq (sum lbvr2) bvrlt1):
    (check_eq (sum lbevr2) bevrlt1):
    (check_eq (sum mei) lzi):
    (check_eq (sum mi) lzi):
    (check_eq (sum mf) lzf):
    (check_eq (sum mbv) lzbv):
    (check_eq (sum mbev) lzbev):
    (check_eq (sum mir2) (replicate 4 irlt1)):
    (check_eq (sum mfr2) (replicate 4 frlt1)):
    (check_eq (sum mbvr2) (replicate 4 bvrlt1)):
    (check_eq (sum mbevr2) (replicate 4 bevrlt1)):
    []
;

check_res test_sum;

let lin   = [-1,-2];
let lfn   = [-1.0,-2.0];
let lbvn  = [int2bv (-1),int2bv (-2)];
let lbevn = map int2bev lin;
let lzir  = map scalar2range lzi;
let lzfr  = map scalar2range lzf;
let lzbvr = map scalar2range lzbv;
let lzbevr= map scalar2range lzbev;

//testcases for laddl
let test_laddl =
(printf "test_laddl\n") seq
    (check_lempty (opadd lei lei)):
    (check_eq (opadd lip lin) lzi):
    (check_eq (opadd lfp lfn) lzf):
    (check_eq (opadd lbvp lbvn) lzbv):
    (check_eq (opadd lbevp lbevn) lzbev):
    (check_fail (opadd lip [-1]) []):
    (check_eq (opadd lir2 lzir) lir2):
    (check_eq (opadd lfr2 lzfr) lfr2):
    (check_eq (opadd lbvr2 lzbvr) lbvr2):
    (check_eq (opadd lbevr2 lzbevr) lbevr2):
    []
;

check_res test_laddl;

//testcases for maddl
let test_maddl =
(printf "test_maddl\n") seq
    (check_mempty (opadd mei lei)):
    (check_eq (opadd mip lin) mzi):
    (check_eq (opadd mfp lfn) mzf):
    (check_eq (opadd mbvp lbvn) mzbv):
    (check_eq (opadd mbevp lbevn) mzbev):
//    (check_eq (opadd mir2 [0,0]) mir2):
    []
;

check_res test_maddl;


//test_cases for maddm
let test_maddm = 
(printf "test_maddm\n") seq
    let r = opadd mi1 mi1 in
    let fr = filter (\e. e!= 2) (flat r) in
    (check_len fr 0):
    []
;

check_res test_maddm;

//testcases for laddsc
let test_laddsc = 
(printf "test_laddsc\n") seq
    (check_lempty (opadd lei 1)):
    (check_eq (opadd li1 (-1)) lzi):
    (check_eq (opadd lf1 (-1.0)) lzf):
    (check_eq (opadd lbv1  (int2bv (-1))) lzbv):
    (check_eq (opadd lbev1  (int2bev (-1))) lzbev):
 //   (check_eq (opadd lir1 0) lir1):
 //   (check_eq (opadd lfr1 0.0) lfr1):
 //   (check_eq (opadd lbvr1 (int2bv 0)) lbvr1):
 //   (check_eq (opadd lbevr1 (int2bev 0)) lbevr1):
   []
;

check_res test_laddsc;

//testcases for maddsc
let test_maddsc = 
(printf "test_maddsc\n") seq
    (check_mempty (opadd mei 1)):
    (check_eq (opadd mi1 (-1)) mzi):
    (check_eq (opadd mf1 (-1.0)) mzf):
    (check_eq (opadd mbv1  (int2bv (-1))) mzbv):
    (check_eq (opadd mbev1  (int2bev (-1))) mzbev):
//    (check_eq (opadd mir2 0) mir2):
    []
;

check_res test_maddsc;

let lir22 = [mk_range (-2) 0, mk_range 0 2];
let mir22 = replicate 4 lir22;
let lfr22 = map intr2floatr lir22;
let lbvr22 = map intr2bvr lir22;
let lbevr22 = map intr2bevr lir22;

let lir3 = [mk_range (-3) 0, mk_range 0 3];
let mir3 = replicate 4 lir3;
let lfr3 = map intr2floatr lir3;
let lbvr3 = map intr2bvr lir3;
let lbevr3 = map intr2bevr lir3;

//testcases for ldiffsc
let test_ldiffsc = 
(printf "test_ldiffsc\n") seq
    (check_lempty (opsub lei 1)):
    (check_eq (opsub li1 1) lzi):
    (check_eq (opsub lf1 1.0) lzf):
    (check_eq (opsub lbv1 (int2bv 1)) lzbv):
    (check_eq (opsub lbev1 (int2bev 1)) lzbev):
    (check_eq (opsub lir2 irlt1) lir3):
    (check_eq (opsub lfr2 frlt1) lfr3):
    (check_eq (opsub lbvr2 bvrlt1) lbvr3):
    (check_eq (opsub lbevr2 bevrlt1) lbevr3):
    []
;

check_res test_ldiffsc;

//testcases for ldiffl
let test_ldiffl = 
(printf "test_ldiffl\n") seq
    (check_lempty (opsub lei lei)):
    (check_eq (opsub lip lip) lzi):
    (check_eq (opsub lfp lfp) lzf):
    (check_eq (opsub lbvp lbvp) lzbv):
    (check_eq (opsub lbevp lbevp) lzbev):
    (check_fail (opsub lip [-1]) []):
    (check_eq (opsub lir2 lir1) lir22):
    (check_eq (opsub lfr2 lfr1) lfr22):
    (check_eq (opsub lbvr2 lbvr1) lbvr22):
    (check_eq (opsub lbevr2 lbevr1) lbevr22):
    []
;

check_res test_ldiffl;

//testcases for mdiffsc
let test_mdiffsc = 
(printf "test_mdiffsc\n") seq
    (check_mempty (opsub mei 1)):
    (check_eq (opsub mi1 1) mzi):
    (check_eq (opsub mf1 1.0) mzf):
    (check_eq (opsub mbv1 (int2bv 1)) mzbv):
    (check_eq (opsub mbev1 (int2bev 1)) mzbev):
    (check_eq (opsub mir2 irlt1) mir3):
    []
;

check_res test_mdiffsc;

//testcases for mdiffl
let test_mdiffl = 
(printf "test_mdiffl\n") seq
    (check_mempty (opsub mei lei)):
    (check_eq (opsub mip lip) mzi):
    (check_eq (opsub mfp lfp) mzf):
    (check_eq (opsub mbvp lbvp) mzbv):
    (check_eq (opsub mbevp lbevp) mzbev):
    (check_fail (opsub mip [-1]) [[]]):
    (check_eq (opsub mir2 lir1) mir22):
    []
;

check_res test_mdiffl;

//test_cases for mdiffm:
let test_mdiffm = 
(printf "test_mdiffm\n") seq
    (check_eq (opsub mi1 mi1) mzi):
    (check_eq (opsub mf1 mf1) mzf):
    (check_eq (opsub mbv1 mbv1) mzbv):
    (check_eq (opsub mbev1 mbev1) mzbev):
    []
;

check_res test_mdiffm;

//testcases for lmulsc
let test_lmulsc = 
(printf "test_lmulsc\n") seq
    let lir2' = [mk_range 1 2, mk_range (-2) (-1)] in
    (check_lempty (opmul lei 1)):
    (check_eq (opmul li1 0) lzi):
    (check_eq (opmul lf1 0.0) lzf):
    (check_eq (opmul lbv1 (int2bv 0)) lzbv):
    []
;

check_res test_lmulsc;

let xi = [1,0,0,1];
let yi = [4,1,2,2];
let yi' = [4,1,2];
let xf = map int2float xi;
let yf = map int2float yi;
let xb = map int2bv xi;
let yb = map int2bv yi;
let xbe = map int2bev xi;
let ybe = map int2bev yi;

//testcases for dot
let test_dot =
(print "test_dot\n") seq
    (check_eq (dot xi yi) 6):
    (check_eq (dot xf yf) (int2float 6)):
    (check_eq (dot xb yb) (int2bv 6)):
    (check_eq (dot xbe ybe) (int2bev 6)):
    (check_fail (dot xi yi') (-255)):
    []
;

check_res test_dot;


//testcases for mmulm
let test_mmulm =
(print "test_mmulm\n") seq
    let yi = replicate 4 [4,1,2,2] in
    let yi' = replicate 3 [4,1,2] in
    let yf = mmap int2float yi in
    let yb = mmap int2bv yi in 
    let ybe = mmap int2bev yi in 
    (check_eq (mmulm miid yi) yi):
    (check_eq (mmulm mfid yf) yf):
    (check_eq (mmulm mbvid yb) yb):
    (check_eq (mmulm mbevid ybe) ybe):
    (check_fail (mmulm miid yi') [[]]):
    []
;

check_res test_mmulm;

//testcases for mmultm
let test_mmultm =
(print "test_mmultm\n") seq
    let yi = transpose (replicate 4 [4,1,2,2]) in
    let yi' = transpose (replicate 3 [4,1,2]) in
    let yf = transpose (mmap int2float yi) in
    let yb = transpose (mmap int2bv yi) in 
    let ybe = transpose (mmap int2bev yi) in 
    (check_eq (mmultm miid yi) (transpose yi)):
    (check_eq (mmultm mfid yf) (transpose yf)):
    (check_eq (mmultm mbvid yb) (transpose yb)):
    (check_eq (mmultm mbevid ybe) (transpose ybe)):
    (check_fail (mmultm miid yi') [[]]):
    []
;

check_res test_mmultm;

////testcases for divel
//(printf "test_divel\n");
//let test_divel = 
//    (check_lempty (divel lei 1)):
//    (check_eq (divel [1,1] 2) [0,0]):
//    (check_eq (divel [1.0,1.0] 2.0) [0.5,0.5]):
//    (check_eq 
//	(divel [int2bv 1, int2bv 1] 
//	     (int2bv 2)) 
//	[int2bv 0,int2bv 0]
//    ):
//    (check_fail (divel [1,1] 0) []):
//    []
//;
//
//check_res test_divel;

//testcases for lmax
let test_lmax = 
(printf "test_lmax\n") seq
    (check_eq (lmax [1,-1,2,-2,3,-3]) 3):
    (check_eq (lmax [1.0,-1.0,2.0,-2.0]) 2.0):
    (check_eq
	(lmax [(int2bv 1),(int2bv (-1)),
	      (int2bv 2),(int2bv (-2))])
	(int2bv 2)
    ):
    (check_eq
	(lmax [(int2bev 1),(int2bev (-1)),
	      (int2bev 2),(int2bev (-2))])
	(int2bev 2)
    ):
    []
;

check_res test_lmax;

//testcases for lmin
let test_lmin = 
(printf "test_lmin\n") seq
    (check_eq (lmin [1,-1,2,-2,3,-3]) (-3)):
    (check_eq (lmin [1.0,-1.0,2.0,-2.0]) (-2.0)):
    (check_eq
	(lmin [(int2bv 1),(int2bv (-1)),
	      (int2bv 2),(int2bv (-2))])
	(int2bv (-2))
    ):
    (check_eq
	(lmin [(int2bev 1),(int2bev (-1)),
	      (int2bev 2),(int2bev (-2))])
	(int2bev (-2))
    ):
    []
;

check_res test_lmin;

//testcases for fstindexof
let test_fstindexof = 
(printf "test_fstindexof\n") seq
    (check_eq (fstindexof [] 4) 0):
    (check_eq (fstindexof [1,-1,2,-2,3,-3] 4) 0):
    (check_eq (fstindexof [1,-1,2,-2,3,-3] 2) 3):
    []
;

check_res test_fstindexof;

//testcases for largmax
let test_largmax = 
(printf "test_largmax\n") seq
    (check_eq (argmax lei) 0):
    (check_eq (argmax [1,-1,2,-2,3,-3]) 5):
    (check_eq (argmax [1,1,1,1,1,1]) 1):
    []
;

check_res test_largmax;

//testcases for margmax
let test_margmax = 
(printf "test_margmax\n") seq
    let t1 = replicate 4 [1,-1,2,-2,3,-3] in
    let t2 = replicate 4 [1,1,1,1] in
    (check_eq (argmax mei) (replicate 4 0)):
    (check_eq (argmax t1) (replicate 4 5)):
    (check_eq (argmax t2) (replicate 4 1)):
    []
;

check_res test_margmax;

//testcases for largnmax
let test_largnmax = 
(printf "test_largnmax\n") seq
    (check_eq (argnmax lei 2) [0]):
    (check_eq (argnmax [1,-1,2,-2,3,-3] 2) [5,3]):
    (check_eq (argnmax [1,1,1,1,1,1] 2) [6,5]):
    []
;

check_res test_largnmax;


//testcases for margnmax
let test_margnmax = 
(printf "test_margnmax\n") seq
    let t1 = replicate 4 [1,-1,2,-2,3,-3] in
    let t2 = replicate 4 [1,1,1,1] in
    (check_eq (argnmax t1 2) (replicate 4 [5,3])):
    (check_eq (argnmax t2 2) (replicate 4 [4,3])):
    []
;

check_res test_margnmax;

