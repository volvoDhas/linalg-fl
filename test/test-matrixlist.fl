//tests for ../lib/matrixlist.fl

load (DIR^"../lib/matrixlist.fl");

let check_eq a b = a == b;
let check_fail f fflag = 
    let trycatch f =
	f gen_catch (\e. fflag)
    in
   (trycatch f) == fflag
;

let check_res rs =
    let ntcs = (length rs) in
    letrec check_test n =
	n > ntcs => 0 |
	(el n rs) => 1 + (check_test (n+1)) |
	(printf "TC -%3d failed\n" n) seq (check_test (n+1))
    in
    let npass = check_test 1 in
    (printf "Result - %d/%d TCs passed\n" npass ntcs) seq ()
;

//testcases for zeros
(printf "test_zeros\n");
let test_zeros =
    (check_eq (zeros 0) []):
    (check_eq (length (zeros 10)) 10):
    (check_fail (zeros (-10)) []):
    []
;

check_res test_zeros;
