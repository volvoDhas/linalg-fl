//core matrix arithmetic library
//implements matrix as a list of lists

//returns true if list is empty, false otherwise
let isempty l = length l == 0 => T | F;

//returns an list/matrix of zeros
let lzeros n = replicate n '0;
let mzeros m n = replicate m (lzeros n);
overload zeros lzeros mzeros;

//returns the element-wise map of f over a (list) list m
let mmap f m = map (\r. map f r) m;

//returns sum of elements of a list
//all numeric types applicable
letrec sum us = length us == 0 => '0 | (hd us) + (sum (tl us));

//returns the element-wise sum 2 lists
let add us vs =  map2 (\u.\v. u+v) us vs;

//returns the element-wise sum of a list and a scalar
//NOTE - add & addel cannot be overloaded becuse of
//a type inference bug in fl
let addel us v = map (\u. u+v) us;


//returns the element-wise difference of 2 lists
let diff us vs = map (\(f,s). f - s) (zip us vs);

//returns the element-wise difference between a list and a scalar
//NOTE - diff & diffel cannot be overloaded becuse of
//a type inference bug in fl
let diffel us v = map (\u. u-v) us;

//returns the dot product of 2 lists
let dot us vs = sum (map2 (\u. \v. u*v) us vs);

//returns the element-wise product of a list and a scalar
let mulel us v = map (\u. u*v) us;

//returns the element-wise quotient of a list and a scalar
let divel us v = map (\u. u/v) us;

//retruns the highest element of a list
letrec lmax us = 
    length us <= 1 => hd us |
    max (hd us) (lmax (tl us))
;

//retruns the lowest element of a list
letrec lmin us = 
    length us <= 1 => hd us |
    min (hd us) (lmax (tl us))
;


//retruns the first index of an element in the list
//NOTE - in fl, list indices start from 1
letrec fstindexof us u =
    letrec search [] = 1
	/\search us = (hd us) == u => 1 | 1 + (search (tl us))
    in
    let index = search us in
    index > (length us) => 0 | index
;


//returns the index of the max element in the list
//NOTE - in fl, list indices start from 1
letrec argmax us = fstindexof us (lmax us);
