//core matrix arithmetic library
//implements matrix as a list of lists

//--------- plugs for bev --------------------

let p_bev_gt x y = (bev_greater x y) == bT;
overload > > p_bev_gt;
infix 5 >;

let p_bev_lt x y = (bev_less x y) == bT;
overload < < p_bev_lt;
infix 5 <;

let p_bev_max {x::bev} {y::bev} = x > y => x | y;
overload max max p_bev_max;

let p_bev_min {x::bev} {y::bev} = x < y => x | y;
overload min min p_bev_min;

let s2bev s = int2bev (sscanf "%d" s);
let s2bv s = int2bv (sscanf "%d" s);
let s2int s = sscanf "%d" s;
let s2float s = str2float s;
overload {' :: string-> *a} s2bv s2int s2float s2bev;
free_binder ';

//--------- type definitions------------------

//The {*a}range type defines an interval 
//between a lower bound and an upper bound
lettype *a range = RANGE *a *a;

//NOTE - implementation of interval arithmetic follows
//T. Hickey, Q. Ju, and M. H. Van Emden. 2001. 
//Interval arithmetic: From principles to implementation. 
//J. ACM 48, 5 (September 2001), 1038-1068. 
//DOI=http://dx.doi.org/10.1145/502102.502106


//Constructor for the range type
let mk_range l h = 
    l > h => error "low-lim > high-lim" |
    (RANGE l h)
;

//utilities for the range type
let scalar2range i = mk_range i i;

//converts an integer range to a float range
let intr2floatr {r::{int} range} =
    val(RANGE li hi) = r in
    mk_range (int2float li) (int2float hi)
;

//converts an integer range to a bv range
let intr2bvr {r::{int} range} =
    val (RANGE li hi) = r in
    mk_range (int2bv li) (int2bv hi)
;

//converts an integer range to a bev range
let intr2bevr {r::{int} range} =
    val (RANGE li hi) = r in
    mk_range (int2bev li) (int2bev hi)
;

//Pretty printers for int, float, bv & bev ranges
let Prangei (RANGE {l::int} {h::int}) = (printf "(%d,%d)" l h) seq "";
let Prangeb (RANGE {l::bv} {h::bv}) = 
    let bv2str b =
	let bl = bv2list b in  
	list2str T "<" "," ">" (\b. bool2str 5 b) bl
    in
    (printf "(%s,%s)" (bv2str l) (bv2str h)) seq "";
let Prangebe (RANGE {l::bev} {h::bev}) = 
    (printf "(%s,%s)" (bev2str 5 l) (bev2str 5 h)) seq "";
let Prangef (RANGE {l::float} {h::float}) =
    (printf "(%s,%s)" (float2str l) (float2str h)) seq "";

install_print_function Prangei;
install_print_function Prangeb;
install_print_function Prangebe;
install_print_function Prangef;


//--------- special ops-----------------------

//applies the operator f for each element of a list with a scalar
let zipwithsc xs n f = map (\x. f x n) xs;

//applies the operator f element-wise to 2 lists
let zipwith xs ys f = map2 f xs ys;

//returns zipwith between a (list) list and a list
let lmap f m v = map (\r. f r v) m;

//returns the element-wise map of f over a (list) list m
let mmap f m = map (\r. map f r) m;

//returns the element-wise map of f over a 2 matrices m1 & m2
let mmap2 f m1 m2 = map2 (\r1. \r2.  map2 f r1 r2) m1 m2;

//returns true if list is empty, false otherwise
let islempty l = length l == 0 => T | F;
let ismempty m = length (flat m) == 0 => T | F;

//overloading seems to fail because of a type inf bug in fl
//overload isempty islempty ismempty;

//returns an list/matrix of zeros
let lzeros n = replicate n '0;
let mzeros m n = replicate m (lzeros n);
overload zeros lzeros mzeros;

//--------- min-max ops-----------------------

//retruns the highest element of a list
letrec lmax us = 
    length us <= 1 => hd us |
    max (hd us) (lmax (tl us))
;

//retruns the lowest element of a list
letrec lmin us = 
    length us <= 1 => hd us |
    min (hd us) (lmin (tl us))
;

//--------- add ops-----------------------

//NOTE - the following sequence of 
//overloading definitions for add
//declares 4 base types explicitly (int, bv, bev, float)
//to avoid overload resolution problems

open_overload {opadd :: *a -> *b -> *c};

//int-int version
let iadd {i::int} {j::int} = i+j; 
add_open_overload opadd iadd;

//float-float version
let fadd {i::float} {j::float} = i+j;
add_open_overload opadd fadd;

//bv-bv version
let badd {i::bv} {j::bv} = i+j; 
add_open_overload opadd badd;

//bev-bev version
let beadd {i::bev} {j::bev} = bev_add i j; 
add_open_overload opadd beadd;

//range-range version
let radd {i::{*a} range} {j::{*a} range} =
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    {mk_range (opadd il jl) (opadd ih jh) :: {*a} range}
;
add_open_overload opadd radd;

//list-scalar version
let ladds {us:: *a list} {v:: *a} =
    {zipwithsc us v opadd :: *a list}
;
add_open_overload opadd ladds;

//list-list version
let laddl {us:: *a list} {vs:: *a list} =
    {zipwith us vs opadd :: *a list}
;
add_open_overload opadd laddl;

//matrix-scalar version
let madds {m:: (*a list) list} {s:: *a} =
    {mmap (\e. opadd e s) m :: (*a list) list}
;
add_open_overload opadd madds;

//matrix-list version
let maddl {m:: (*a list) list} {vs:: *a list} =
//    {lmap opadd m vs :: (*a list) list}
    {map (\r. opadd r vs) m :: (*a list) list}
;
//NOTE - overloading this breaks resolution
//add_open_overload opadd maddl;

//matrix-matrix version
let maddm {m1:: (*a list) list} {m2:: (*a list) list} =
    {mmap2 opadd m1 m2 :: (*a list) list}
;
//NOTE - overloading this breaks resolution
//add_open_overload opadd maddm;

//--------- sum ops-----------------------

//NOTE - the following sequence of 
//overloading definitions for sum
//declares 4 base types explicitly (int, bv, bev, float)
//to avoid overload resolution problems

open_overload {sum :: *a list -> *a};

letrec sumsc us =
    length us == 0 => '0 | opadd (hd us) (sumsc (tl us));
add_open_overload sum sumsc;

letrec sumrng us =
    length us == 0 => mk_range '0 '0 | opadd (hd us) (sumrng (tl us));
add_open_overload sum sumrng;

let msum m = map sum m;
add_open_overload sum msum;

//--------- diff ops-----------------------

//NOTE - the following sequence of 
//overloading definitions for subtract
//declares 4 base types explicitly (int, bv, bev, float)
//to avoid overload resolution problems

open_overload {opsub :: *a -> *b -> *c};

//int-int version
let isub {i::int} {j::int} = i-j; 
add_open_overload opsub isub;

//float-float version
let fsub {i::float} {j::float} = i-j; 
add_open_overload opsub fsub;

//bv-bv version
let bvsub {i::bv} {j::bv} = i-j; 
add_open_overload opsub bvsub;

//bev-bev version
let bevsub {i::bev} {j::bev} = bev_sub i j;
add_open_overload opsub bevsub;

//range-range version
let rsub {i::{*a} range} {j::{*a} range} =
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    //NOTE - inversion of interval limits
    {mk_range (opsub il jh) (opsub ih jl) :: {*a} range}
;
add_open_overload opsub rsub;

//list-scalar version
let ldiffsc {us :: *a list} {v:: *a} = 
    {zipwithsc us v opsub :: *a list};
add_open_overload opsub ldiffsc;

//list-list version
let ldiffl {us :: *a list} {vs :: *a list} = 
    {zipwith us vs opsub :: *a list}
;
add_open_overload opsub ldiffl;

//matrix-scalar version
let mdiffsc {m :: (*a list) list} {v :: *a} = 
    {mmap (\e. opsub e v) m :: (*a list) list}
; 
add_open_overload opsub mdiffsc;

//matrix-list version
let mdiffl m vs = lmap opsub m vs;
//NOTE - overloading this breaks resolution
//add_open_overload opsub mdiffl;

//matrix-matrix version
let mdiffm m1 m2 = mmap2 opsub m1 m2;
//NOTE - overloading this breaks resolution
//add_open_overload opsub mdiffm;

//--------- mul ops-----------------------

//NOTE - the following sequence of 
//overloading definitions for multiply
//declares 4 base types explicitly (int, bv, bev, float)
//to avoid overload resolution problems

open_overload {opmul :: *a -> *b -> *c};

//int-int version
let imul {i::int} {j::int} = i*j; 
add_open_overload opmul imul;

//float-float version
let fmul {i::float} {j::float} = i*j; 
add_open_overload opmul fmul;

//bv-bv version
let bvmul {i::bv} {j::bv} = i*j;
add_open_overload opmul bvmul;

//bev-bev version
let bevmul {i::bev} {j::bev} = bev_mul i j;
add_open_overload opmul bevmul;

//range-range version
let rmul {i::{*a} range} {j::{*a} range} =
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    let s = [opmul il jl, opmul il jh, opmul ih jl, opmul ih jh] in
    {mk_range (lmin s) (lmax s) :: {*a} range}
; 
add_open_overload opmul rmul;

//returns the element-wise product of a list and a scalar
let lmulsc {us:: *a list} {v :: *a} = 
    {zipwithsc us v opmul :: *a list}
;
add_open_overload opmul lmulsc;

//returns the element-wise product of a matrix and a scalar
let mmulsc {m :: (*a list) list} {v :: *a} = 
    {mmap (\e. opmul e v) m :: (*a list) list}
;
add_open_overload opmul mmulsc;

//--------- dot ops-----------------------

//returns the dot product of 2 lists
let dot us vs = sum (zipwith us vs opmul);


//returns the product of 2 matrices lhs*rhs 
//with rhs in a transposed form
let mmultm m1 tm2 =
    let crossmap row = map (\col. dot row col) tm2 in
    map crossmap m1
;

//returns the product of 2 matrices
//TODO - change to an efficient version
let mmulm m1 m2 =
    let tm2 = transpose m2 in
    mmultm m1 tm2;
;

//--------- div ops-----------------------

//the defix / operator
//let opdiv = (defix /);

//returns the element-wise quotient of a list and a scalar
//let divel us v = zipwithsc us v opdiv;

//--------- index ops-----------------------
//NOTE - in fl, indices start from 1

//retruns the first index of an element in the list
letrec fstindexof us u =
    letrec search [] = 1
	/\search us = (hd us) == u => 1 | 1 + (search (tl us))
    in
    let index = search us in
    index > (length us) => 0 | index
;


//returns the index of the max element in the list
letrec largmax us = fstindexof us (lmax us);

//returns a vector of indexes of max element in each row
letrec margmax m = map largmax m;
overload argmax largmax margmax;

//returns the indices of n highest elements in the list
let largnmax us n = 
    us == [] => [0] |
    let usi = zip us (1--(length us)) in
    let susi = 
	qsort (\(xp,xi). \(yp,yi). xp == yp => 0 | xp < yp => -1 | 1) usi
    in
    map snd (firstn n (rev susi))
;

//returns a vector of indexes of n element in each row
let margnmax m n = map (\r. largnmax r n) m;

overload argnmax largnmax margnmax;
