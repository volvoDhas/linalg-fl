//core matrix arithmetic library
//implements matrix as a list of lists


//returns an int list of zeros
let zeros n =
    replicate n 0
;

//returns sum of elements of a list
//all numeric types applicable
letrec sum [] = '0
    /\sum vs =
    (hd vs) + (sum (tl vs))
;

//returns a list of element-wise sum 2 lists
let add us vs =  map2 (\u. \v. u + v) us vs;

//returns a list of element-wise sum of the list and a scalar
//NOTE - add & addel cannot be overloaded becuse of
//a type inference bug in fl
let addel us v = map (\u. u+v) us;


//returns a list of element-wise difference 2 lists
let diff us vs = map (\(f,s). f - s) (zip us vs);

//returns a list of element-wise difference of the list and a scalar
//NOTE - diff & diffel cannot be overloaded becuse of
//a type inference bug in fl
let diffel us v = map (\u. u-v) us;

//returns dot product of 2 lists
let dot us vs = sum (map2 (\u. \v. u*v) us vs);
