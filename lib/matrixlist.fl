//core matrix arithmetic library
//implements matrix as a list of lists

//--------- type definitions------------------

//The {*a}range type defines an interval 
//between a lower bound and an upper bound
lettype *a range = RANGE *a *a;

//NOTE - implementation of interval arithmetic follows
//T. Hickey, Q. Ju, and M. H. Van Emden. 2001. 
//Interval arithmetic: From principles to implementation. 
//J. ACM 48, 5 (September 2001), 1038-1068. 
//DOI=http://dx.doi.org/10.1145/502102.502106


//Constructor for the range type
let mk_nrange l h = 
    l > h => error "low-lim > high-lim" |
    (RANGE l h)
;

//bev uses exclusive operands 
//so we need a separate constructor
let mk_bevrange {l::bev} {h::bev} =
    ((bev_geq l h) bAND (bev_neq l h)) == bT => error "low-lim > high-lim" |
    (RANGE l h)
;

overload mk_range mk_nrange mk_bevrange;

//utilities for the range type
//converts an integer range to a float range
let intr2floatr {r::{int} range} =
    val(RANGE li hi) = r in
    mk_range (int2float li) (int2float hi)
;

//converts an integer range to a bv range
let intr2bvr {r::{int} range} =
    val (RANGE li hi) = r in
    mk_range (int2bv li) (int2bv hi)
;

//Pretty printers for int, float and bv ranges
let Prangei (RANGE {l::int} {h::int}) = (printf "(%d,%d)" l h) seq "";
let Prangeb (RANGE {l::bv} {h::bv}) = 
    let bv2str b =
	let bl = bv2list b in  
	list2str T "<" "," ">" (\b. bool2str 5 b) bl
    in
    (printf "(%s,%s)" (bv2str l) (bv2str h)) seq "";
let Prangebe (RANGE {l::bev} {h::bev}) = 
    (printf "(%s,%s)" (bev2str 5 l) (bev2str 5 h)) seq "";
let Prangef (RANGE {l::float} {h::float}) =
    (printf "(%s,%s)" (float2str l) (float2str h)) seq "";

install_print_function Prangei;
install_print_function Prangeb;
install_print_function Prangebe;
install_print_function Prangef;


//--------- special ops-----------------------

//applies the operator f for each element of a list with a scalar
let zipwithsc xs n f = map (\x. f x n) xs;

//applies the operator f element-wise to 2 lists
let zipwith xs ys f = map2 f xs ys;

//returns list-wise zipwith between a (list) list and a scalar
let lmap f m v = map (\r. f r v) m;

//returns the element-wise map of f over a (list) list m
let mmap f m = map (\r. map f r) m;

//returns the element-wise map of f over a 2 matrices m1 & m2
let mmap2 f m1 m2 = map2 (\r1. \r2.  map2 f r1 r2) m1 m2;

//returns true if list is empty, false otherwise
let islempty l = length l == 0 => T | F;
let ismempty m = length (flat m) == 0 => T | F;

//overloading seems to fail because of a type inf bug in fl
//overload isempty islempty ismempty;

//returns an list/matrix of zeros
let lzeros n = replicate n '0;
let mzeros m n = replicate m (lzeros n);
overload zeros lzeros mzeros;

//--------- min-max ops-----------------------

//retruns the highest element of a list
letrec lmax us = 
    length us <= 1 => hd us |
    max (hd us) (lmax (tl us))
;

//retruns the lowest element of a list
letrec lmin us = 
    length us <= 1 => hd us |
    min (hd us) (lmin (tl us))
;

//--------- add ops-----------------------

//NOTE - the following sequence of 
//overloading definitions for add
//declares 3 base types explicitly (int, bv, float)
//to avoid overload resolution problems

open_overload {opadd :: *a -> *b -> *c};

//int-int version
let iadd {i::int} {j::int} = i+j; 
add_open_overload opadd iadd;

//float-float version
let fadd {i::float} {j::float} = i+j;
add_open_overload opadd fadd;

//bv-bv version
let badd {i::bv} {j::bv} = i+j; 
add_open_overload opadd badd;

//range-range version
let radd {i::{*a} range} {j::{*a} range} =
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    mk_range (opadd il jl) (opadd ih jh)
;
add_open_overload opadd radd;

//range-scalar version
let radds {i::{*a} range} {j:: *a} = 
    val (RANGE il ih) = i in
    mk_range (opadd il j) (opadd ih j)
;
add_open_overload opadd radds;

//scalar-range version
let saddr {j:: *a} {i::{*a} range} = radds i j;
add_open_overload opadd saddr;

//NOTE - the following sequence of 
//overloading definitions for lsum
//declares 3 base types explicitly (int, bv, float)
//to avoid overload resolution problems
//which seem to occur when using ' operator

//returns sum of elements of a list
open_overload {lsum :: *a list -> *a};

letrec lsumi {us::int list} = 
    length us == 0 => 0 | opadd (hd us) (lsumi (tl us));
add_open_overload lsum lsumi;

letrec lsumf {us::float list} = 
    length us == 0 => 0.0 | opadd (hd us) (lsumf (tl us));
add_open_overload lsum lsumf;

letrec lsumbv {us::bv list} = 
    length us == 0 => (int2bv 0) | opadd (hd us) (lsumbv (tl us));
add_open_overload lsum lsumbv;

letrec lsumri {uis :: ({int} range) list} = 
    length uis == 0 => mk_range 0 0 | 
    opadd (hd uis) (lsumri (tl uis))
;
add_open_overload lsum lsumri;

letrec lsumrf {uis :: ({float} range) list} = 
    length uis == 0 => mk_range 0.0 0.0 | 
    opadd (hd uis) (lsumrf (tl uis))
;
add_open_overload lsum lsumrf;

letrec lsumrbv {uis :: ({bv} range) list} = 
    length uis == 0 => mk_range (int2bv 0) (int2bv 0) | 
    opadd (hd uis) (lsumrbv (tl uis))
;
add_open_overload lsum lsumrbv;

//returns a list of sum of elements of each row
//all numeric types applicable
let msum m = map lsum m;

//TODO - overloading of sum ops
//paused because of a presumed type inference bug in fl

//returns the element-wise sum 2 lists
let laddl us vs =  zipwith us vs opadd;

//returns the row-wise sum of a matrix and a vector
let maddl m vs = lmap laddl m vs;

//returns the element-wise sum of 2 matrics
let maddm m1 m2 = mmap2 opadd m1 m2;

//returns the element-wise sum of a list and a scalar
let laddsc us s = zipwithsc us s opadd;

//returns the element-wise sum of a matrix and a scalar
let maddsc m s = map (\r. laddsc r s) m;

//TODO - overloading of all add ops
//paused because of a presumed type inference bug in fl

//--------- diff ops-----------------------

//NOTE - the following sequence of 
//overloading definitions for subtract
//declares 3 base types explicitly (int, bv, float)
//to avoid overload resolution problems

open_overload {opsub :: *a -> *b -> *a};

//int-int version
let isub {i::int} {j::int} = i-j; 
add_open_overload opsub isub;

//int range-int range version
let irsub {i::{int} range} {j::{int} range} = 
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    //NOTE - inversion of interval limits
    mk_range (isub il jh) (isub ih jl)
; 
add_open_overload opsub irsub;

//int range-int version
let irsubi {i::{int} range} {j::int} = 
    val (RANGE il ih) = i in
    mk_range (isub il j) (isub ih j)
; 
add_open_overload opsub irsubi;

//float-float version
let fsub {i::float} {j::float} = i-j; 
add_open_overload opsub fsub;

//float range-float range version
let frsub {i::{float} range} {j::{float} range} = 
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    //NOTE - inversion of interval limits
    mk_range (fsub il jh) (fsub ih jl)
; 
add_open_overload opsub frsub;

//float range-float version
let frsubf {i::{float} range} {j::float} = 
    val (RANGE il ih) = i in
    mk_range (fsub il j) (fsub ih j)
; 
add_open_overload opsub frsubf;

//bv-bv version
let bvsub {i::bv} {j::bv} = i-j; 
add_open_overload opsub bvsub;

//bv range-bv range version
let bvrsub {i::{bv} range} {j::{bv} range} = 
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    //NOTE - inversion of interval limits
    mk_range (bvsub il jh) (bvsub ih jl)
; 
add_open_overload opsub bvrsub;

//bv range-bv version
let bvrsubbv {i::{bv} range} {j::bv} = 
    val (RANGE il ih) = i in
    mk_range (bvsub il j) (bvsub ih j)
; 
add_open_overload opsub bvrsubbv;


//returns the element-wise difference of 2 lists
let ldiffl us vs = zipwith us vs opsub;

//returns the row-wise difference between a matrix and a vector
let mdiffl m vs = lmap ldiffl m vs;

//returns the element-wise difference of 2 matrices
let mdiffm m1 m2 = mmap2 opsub m1 m2;

//returns the element-wise difference between a list and a scalar
let ldiffsc us v = zipwithsc us v opsub;

//returns the element-wise difference between a matrix and a scalar
let mdiffsc m v = map (\r. ldiffsc r v) m;

//TODO - overloading of all diff ops
//paused because of a presumed type inference bug in fl

//--------- mul ops-----------------------

//NOTE - the following sequence of 
//overloading definitions for multiply
//declares 3 base types explicitly (int, bv, float)
//to avoid overload resolution problems

open_overload {opmul :: *a -> *b -> *a};

//int-int version
let imul {i::int} {j::int} = i*j; 
add_open_overload opmul imul;

//int range-int range version
let rimul {i::{int} range} {j::{int} range} = 
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    let s = [imul il jl, imul il jh, imul ih jl, imul ih jh] in
    mk_range (lmin s) (lmax s)
; 
add_open_overload opmul rimul;

//int range-int version
let rimuli {i::{int} range} {j::int} = 
    val (RANGE il ih) = i in
    let s1 = imul il j in
    let s2 = imul ih j in
    mk_range (min s1 s2) (max s1 s2)
; 
add_open_overload opmul rimuli;

//float-float version
let fmul {i::float} {j::float} = i*j; 
add_open_overload opmul fmul;

//float range-float range version
let rfmul {i::{float} range} {j::{float} range} = 
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    let s = [fmul il jl, fmul il jh, fmul ih jl, fmul ih jh] in
    mk_range (lmin s) (lmax s)
; 
add_open_overload opmul rfmul;

//float range-float version
let rfmulf {i::{float} range} {j::float} = 
    val (RANGE il ih) = i in
    let s1 = fmul il j in
    let s2 = fmul ih j in
    mk_range (min s1 s2) (max s1 s2)
; 
add_open_overload opmul rfmulf;

//bv-bv version
let bvmul {i::bv} {j::bv} = i*j;
add_open_overload opmul bvmul;

//bv range-bv range version
let rbvmul {i::{bv} range} {j::{bv} range} =
    val (RANGE il ih) = i in
    val (RANGE jl jh) = j in
    let s = [bvmul il jl, bvmul il jh, bvmul ih jl, bvmul ih jh] in
    mk_range (lmin s) (lmax s)
;
add_open_overload opmul rbvmul;

//bv range-bv version
let rbvmulbv {i::{bv} range} {j::bv} =
    val (RANGE il ih) = i in
    let s1 = bvmul il j in
    let s2 = bvmul ih j in
    mk_range (min s1 s2) (max s1 s2)
;
add_open_overload opmul rbvmulbv;


//returns the dot product of 2 lists
let dot us vs = lsum (zipwith us vs opmul);


//returns the product of 2 matrices lhs*rhs 
//with rhs in a transposed form
let mmultm m1 tm2 =
    let crossmap row = map (\col. dot row col) tm2 in
    map crossmap m1
;

//returns the product of 2 matrices
//TODO - change to an efficient version
let mmulm m1 m2 =
    let tm2 = transpose m2 in
    mmultm m1 tm2;
;

//returns the element-wise product of a list and a scalar
let lmulsc us v = zipwithsc us v opmul;

//returns the element-wise product of a matrix and a scalar
let mmulsc m v = map (\r. lmulsc r v) m;

//--------- div ops-----------------------

//the defix / operator
//let opdiv = (defix /);

//returns the element-wise quotient of a list and a scalar
//let divel us v = zipwithsc us v opdiv;

//--------- index ops-----------------------
//NOTE - in fl, indices start from 1

//retruns the first index of an element in the list
letrec fstindexof us u =
    letrec search [] = 1
	/\search us = (hd us) == u => 1 | 1 + (search (tl us))
    in
    let index = search us in
    index > (length us) => 0 | index
;


//returns the index of the max element in the list
letrec largmax us = fstindexof us (lmax us);

//returns the indices of n highest elements in the list
let largnmax us n = 
    us == [] => [0] |
    let usi = zip us (1--(length us)) in
    let susi = 
	qsort (\(xp,xi). \(yp,yi). xp == yp => 0 | xp < yp => -1 | 1) usi
    in
    map snd (firstn n (rev susi))
;

//returns a vector of indexes of max element in each row
letrec margmax m = map largmax m;

//returns a vector of indexes of n element in each row
let margnmax m n = map (\r. largnmax r n) m
